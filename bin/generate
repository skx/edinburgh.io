#!/usr/bin/perl
#
#  To script to read ./data/*.xml and generate a series of static
# html-files.
#
#  The code is a little ropy, but will be improved.
#
# Steve
# --


use strict;
use warnings;

use File::Find;
use File::Path qw/ mkpath /;
use HTML::Template;
use JSON;


#
#  Configuration variables.
#
my %CONFIG;
$CONFIG{ 'input' }   = "./data";
$CONFIG{ 'output' }  = "./htdocs";
$CONFIG{ 'verbose' } = 1;


#
#  The data for all our pubs.
#
my %DATA;

#
#  Find all the XML files for our pubs.
#
#  Build into an (inefficient) data-structure.
#
$CONFIG{ 'verbose' } && print "Finding files beneath: $CONFIG{'input'}\n";
find( { wanted => \&process, no_chdir => 1 }, $CONFIG{ 'input' } );

#
#  Create a single page for each venue.
#
#  TODO: We need some way of marking venues as having been renamed
#
#   e.g.  The current "leith beer co" is the old "waterline".
#
createVenues();


#
#  Create the A-Z & letter-pages
#
createA2Z();


#
#  Create the data page
#
createDataPage();


#
#  Create recent page.
#
createRecentPage();


#
#  All done
#
exit(0);



#
# Process *.xml.
#
sub process
{
    my ($file) = $File::Find::name;
    return unless ( $file =~ /\.xml$/ );

    $CONFIG{ 'verbose' } && print "Parsing: $file\n";

    open( my $data, "<", $file ) or
      die "Failed to read $file - $!";
    foreach my $line (<$data>)
    {
        chomp($line);
        if ( $line =~ /^\s+<([^>]+)>(.*)<\/[^>]+>$/ )
        {
            $DATA{ $file }{ $1 } = $2;
        }
    }
    close($data);
}


#
#  Create one page for each venue.
#
sub createVenues
{
    #
    #  For each venue.
    #
    foreach my $venue ( keys %DATA )
    {

        my $template =
          HTML::Template->new( filename => "./templates/venue.html.tmpl",
                               die_on_bad_params => 0 );

        #
        #  The images for this pub
        #
        my $images = undef;
        my $sname  = $DATA{ $venue }{ 'sname' };
        foreach my $img ( sort( glob("images/$sname*") ) )
        {
            push( @$images, { path => $img } );
        }

        #
        #  Setup past names.
        #
        my $prev = $DATA{ $venue }{ 'previously' };
        delete $DATA{ $venue }{ 'previously' };


        if ($prev)
        {
            my $previous = undef;
            foreach my $past ( split( /,/, $prev ) )
            {

                #
                #  Split
                #
                if ( $past =~ /(.*)\[(.*)\]/ )
                {
                    my $name  = $1;
                    my $sname = $2;
                    push( @$previous,
                          {  name  => $name,
                             sname => $sname
                          } );
                }
            }
            $DATA{ $venue }{ 'previously' } = $previous if ($previous);
        }

        #
        #  If a pub has been renamed to something else then handle that.
        #
        my $cur = $DATA{ $venue }{ 'currently' };
        delete $DATA{ $venue }{ 'currently' };

        if ($cur)
        {
            my $current = undef;
            foreach my $past ( split( /,/, $cur ) )
            {

                #
                #  Split
                #
                if ( $past =~ /(.*)\[(.*)\]/ )
                {
                    my $name  = $1;
                    my $sname = $2;
                    push( @$current,
                          {  name  => $name,
                             sname => $sname
                          } );
                }
            }
            $DATA{ $venue }{ 'currently' } = $current if ($current);
        }



        #
        #  The short-name should have a .html suffix, if it doesn't.
        #
        $sname .= ".html" unless ( $sname =~ /\.html$/i );

        #
        #  Set the data into the template.
        #
        $template->param( $DATA{ $venue } );

        if ($images)
        {
            $template->param( images => $images, has_images => 1 );
        }
        else
        {
            print "WARNING: $sname missing images\n";
        }

        #
        #  Ensure the output directory exists..
        #
        if ( !-d $CONFIG{ 'output' } . "/pubs" )
        {
            mkpath( $CONFIG{ 'output' } . "/pubs", { verbose => 0 } );
        }

        #
        #  Write out the output.
        #
        open( OUTPUT, ">", $CONFIG{ 'output' } . "/pubs/" . $sname );
        print OUTPUT $template->output();
        close(OUTPUT);
    }

}


#
#  Create a-z
#
sub createA2Z
{

    #
    #  Process each letter.
    #
    my $letters;
    my $index;


    foreach my $letter ( 'a' ... 'z' )
    {
        my $loop = undef;

        #
        # Look for venues with that name.
        #
        foreach my $tmp ( keys %DATA )
        {
            my $name = $DATA{ $tmp }{ 'name' };
            $name =~ s/^the //gi;
            my $beg = substr( $name, 0, 1 );
            $beg = lc($beg);

            if ( $beg eq $letter )
            {
                push( @$loop, $DATA{ $tmp } );
            }
        }


        if ($loop)
        {
            push( @$index,
                  {  letter  => $letter,
                     entries => $loop
                  } );
        }
        else
        {
            push( @$index, { letter => $letter, } );
        }



        my $count = undef;
        $count = 1 if ($loop);
        push( @$letters,
              {  letter => $letter,
                 count  => $count
              } );

        my $template =
          HTML::Template->new( filename => "./templates/letter.html.tmpl" ,
                               die_on_bad_params => 0 );

        $template->param( loop => $loop ) if ($loop);
        $template->param( letter => $letter );

        #
        #  Open.
        #
        if ( !-d $CONFIG{ 'output' } . "/pubs/a-z/$letter/" )
        {
            mkpath( $CONFIG{ 'output' } . "/pubs/a-z/$letter/",
                    { verbose => 0 } );
        }

        open( my $handle, ">", "$CONFIG{'output'}/pubs/a-z/$letter/index.html" )
          or
          die "Failed to open: $!";
        print $handle $template->output();
        close($handle);

    }

    #
    #  Now the a-z
    #
    my $template = HTML::Template->new( filename => "./templates/a-z.html.tmpl" ,
                                        die_on_bad_params => 0 );

    $template->param( index => $index );
    open( my $handle, ">", "$CONFIG{'output'}/pubs/a-z/index.html" );
    print $handle $template->output();
    close($handle);

}


#
#  Create:
#
#     /data/pubs.xml
#     /data/pubs.json
#
sub createDataPage
{

    #
    #  This nasty code is just to sort the pubs by their name.
    #
    my $data;
    foreach my $key (
        sort {
            lc $DATA{ $a }{ 'name' } cmp lc $DATA{ $b }{ 'name' }
        } keys %DATA
      )
    {

        #
        #  We want to link to *our* site, for each pub.
        #
        my $d = $DATA{ $key };
        $d->{ "link" } =
          "http://edinburgh.io/pubs/" . $d->{ 'sname' } . ".html";

        #
        #  If the pub is closed/replaced then we don't include it
        # in the dump - because the successor should be present
        # instead.
        #
        push( @$data, $d ) unless ( $d->{ 'closed' } );
    }

    #
    #  Ensure we have the output-directory.
    #
    if ( !-d $CONFIG{ 'output' } . "/data" )
    {
        mkpath( $CONFIG{ 'output' } . "/data", { verbose => 0 } );
    }

    #
    # Output the JSON version of the data.
    #
    open( my $handle, ">", "$CONFIG{'output'}/data/pubs.json" );
    print $handle encode_json($data);
    close($handle);

    #
    # Output the JSONP version of the data.
    #
    open( my $jsonp, ">", "$CONFIG{'output'}/data/pubs.jsonp" );
    print $jsonp "pubs(" . encode_json($data) . ")";
    close($jsonp);

    #
    # Output the "XML" version.  Twice.
    #
    my $template = HTML::Template->new( filename => "./templates/data.xml.tmpl",
                                        die_on_bad_params => 0 );

    $template->param( xml => $data );
    open( my $xhandle,  ">", "$CONFIG{'output'}/data/pubs.xml" );
    open( my $xthandle, ">", "$CONFIG{'output'}/data/pubs.xml.txt" );
    print $xhandle $template->output();
    print $xthandle $template->output();
    close($xhandle);
    close($xthandle);

    #
    #  Finally output the CSV version.
    #
    my $csvt = HTML::Template->new( filename => "./templates/data.csv.tmpl",
                                    die_on_bad_params => 0 );

    $csvt->param( data => $data );
    open( my $csvhandle, ">", "$CONFIG{'output'}/data/pubs.csv" );
    print $csvhandle $csvt->output();
    close($csvhandle);
}


#
#  Create a page for the most recent N pubs.
#
sub createRecentPage
{
    my @sorted = sort { -M $a <=> -M $b }  (keys %DATA );

    my $loop;
    my $count = 0;
    foreach my $file ( @sorted )
    {
        next if ( $count > 10 );
        push( @$loop, $DATA{$file} );
        $count ++;
    }


    my $csvt = HTML::Template->new( filename => "./templates/recent.html.tmpl",
                                    die_on_bad_params => 0 );

    $csvt->param( data => $loop );

    if ( !-d $CONFIG{ 'output' } . "/recent" )
    {
        mkpath( $CONFIG{ 'output' } . "/recent", { verbose => 0 } );
    }

    open( my $handle, ">", "$CONFIG{'output'}/recent/index.html" );
    print $handle $csvt->output();
    close($handle);
}
